"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var jsx_runtime_1 = require("react/jsx-runtime");
var api_1 = require("../api");
var utils_1 = require("../extension-api/utils");
jest.mock('@remote-ui/react', function () { return (__assign(__assign({}, jest.requireActual('@remote-ui/react')), { render: jest.fn() })); });
jest.mock('react', function () { return (__assign(__assign({}, jest.requireActual('react')), { createElement: jest.fn() })); });
jest.mock('@shopify/admin-ui-extensions', function () { return (__assign(__assign({}, jest.requireActual('@shopify/admin-ui-extensions')), { extend: jest.fn() })); });
var reactCreateElement = jest.requireMock('react').createElement;
var remoteRender = jest.requireMock('@remote-ui/react').render;
var adminUIExtensions = jest.requireMock('@shopify/admin-ui-extensions');
describe('api', function () {
    it('render calls remote render with generated element', function () {
        var element = (0, jsx_runtime_1.jsx)("div", {});
        var root = { mount: jest.fn() };
        var api = { locale: 'en' };
        var createdElement = (0, jsx_runtime_1.jsx)("p", {});
        reactCreateElement.mockImplementation(function () { return createdElement; });
        (0, api_1.render)(function () { return element; })(root, api);
        expect(reactCreateElement).toHaveBeenCalledWith(utils_1.ExtensionApiContext.Provider, { value: api }, element);
        expect(remoteRender).toHaveBeenCalledWith(createdElement, root, expect.any(Function));
        var renderCallback = remoteRender.mock.calls[0][2];
        renderCallback();
        expect(root.mount).toHaveBeenCalled();
    });
    it('extend calls extend from admin-ui-extensions', function () {
        var callback = function () { };
        jest.spyOn(adminUIExtensions, 'extend');
        (0, api_1.extend)('Playground', callback);
        expect(adminUIExtensions.extend).toHaveBeenCalledWith('Playground', callback);
    });
});
